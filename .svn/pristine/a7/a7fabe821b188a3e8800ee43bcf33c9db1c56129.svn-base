using System;
using System.Collections.Generic;
using Demcon.ProductionTool.Hardware;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Diagnostics;
using System.IO;

namespace Demcon.ProductionTool.Model.Tests.LUTDetermination
{
    public class LUTTestStep0031 : TestStep
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenericTestStep0031"/> class.
        /// DO NOT USE! Only for Serializabililty!
        /// </summary>
        [Obsolete]
        public LUTTestStep0031()
            : this(null)
        { }

        public LUTTestStep0031(TestManager testManager)
            : base(testManager)
        {
            this.Name = "Analyze the measurement";
            this.Instructions = "Measurement Information\n" +
                                "- Grid4 Location   : \n" +
                                "- Grid  Location   : \n" +
                                "- Var Intensity    : \n" +
                                "- Var Mass         : \n" +
                                "- Var Distance     : \n" +
                                "If ready, press Analyze";
            this.SupportingImage = string.Empty;
            this.ButtonOptions = EButtonOptions.OK | EButtonOptions.Analyze;
            this.Results = new List<Result>();
            this.OnTestUpdated(false);
        }

        public override void Execute(EButtonOptions userAction, string info)
        {
            this.Results.Clear();
            if (userAction == EButtonOptions.OK)
            {
                // Check or do something (with the hardware?) for the test
                this.Results.Add(new BooleanResult("Analyze the measurement", "Python script executed", true));
                this.OnTestUpdated(true);
            }

            if (userAction == EButtonOptions.Analyze)
            {
                // Check or do something (with the hardware?) for the test
                String pythonLocation = @"Python/2. FieldMaskGeneration.py";
                String pythonArgument = "1"; //additional
                string fullPath = Path.GetFullPath(pythonLocation);
                String result = run_cmd(fullPath, pythonArgument);
                MessageBox.Show(result, "Python Execution");
                
            }

            
        }

        private string run_cmd(string cmd, string args)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = "C:/pyzo2015a/python.exe ";
            start.Arguments = string.Format("\"{0}\" \"{1}\"", cmd, args);
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                    return result;
                }
            }
        }




    }

    

}
