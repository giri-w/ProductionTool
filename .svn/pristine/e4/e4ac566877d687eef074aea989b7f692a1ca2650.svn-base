using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Data;
using System.Diagnostics;
using System.Net;
using System.IO;
using WinSCP;
using System.Xml.Linq;

namespace HemicsFat
{
    public class Python
    {
        public static StringBuilder output = new StringBuilder();
        string result { get; set; }

        public string[] compArray(string[] args)
        {
            string init = string.Empty;
            string[] param = new string[10];
            for (int i = 0; i < param.Length; i++)
            {
                param[i] = init;
            }

            // set the parameter with argument
            for (int i = 0; i < args.Length; i++)
            {
                param[i] = args[i];
            }

            return param;
        }

        public string run_cmd(string cmd, string[] args)
        {
            string init = string.Empty;
            string[] param = new string[10];
            for (int i=0;i<param.Length;i++)
            {
                param[i] = init;
            }

            // set the parameter with argument
            for (int i=0;i<args.Length;i++)
            {
                param[i] = args[i];
            }

            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = "C:/pyzo2015a/python.exe ";
            start.Arguments = string.Format("\"{0}\"  \"{1}\"  \"{2}\"  \"{3}\" \"{4}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\"",
                                             cmd, param[0], param[1], param[2], param[3], param[4], param[5], param[6], param[7], param[8], param[9]);

            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    string result_cmd = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                    result = result_cmd;
                    return result_cmd;
                }

                while (!process.StandardOutput.EndOfStream)
                {
                    string line = process.StandardOutput.ReadLine();
                }


            }
        }


        public string RunPython(string pythonLocation, string pythonArgument)
        {
            try
            {
                
                string fullPath = Path.GetFullPath(pythonLocation);
                Process process = new Process();
                process.StartInfo.FileName = @"C:\Python\Demcon2017\Python.exe";
                //process.StartInfo.WorkingDirectory = @"Python";
                process.StartInfo.Arguments = string.Format("\"{0}\" \"{1}\"", fullPath, pythonArgument);   //"/C python checkVolunteerScan_1_9_0.py";
                process.StartInfo.CreateNoWindow = true; // We don't need new window
                process.StartInfo.RedirectStandardError = true;
                process.StartInfo.RedirectStandardOutput = true;

                process.StartInfo.UseShellExecute = false;
                process.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                {
                    // Prepend line numbers to each line of the output.
                    if (!String.IsNullOrEmpty(e.Data))
                    {
                        output.Append(e.Data + "\n");
                    }

                });

                process.Start();
                // Asynchronously read the standard output of the spawned process. 
                // This raises OutputDataReceived events for each line of output.
                process.BeginOutputReadLine();
                process.WaitForExit();

                // Write the redirected output to this application's window.
                Console.WriteLine(output);

                process.WaitForExit();
                process.Close();
                result = output.ToString();
                return result;

            }
            catch (Exception e)
            {
                Console.WriteLine("Error: {0}", e);
                return "Error, file not complete";
            }

        }
        public bool BoolPython()
        {
              
            if (result.Contains("PASS"))
            {
                return true;
            }
            else
            {
                return false;
            }

        
            }
        
           
    }
        public class ChangeXml
        {
            public bool ChangeFixedMask(string filePath, string fixedMaskLeft, string fixedMaskRight)
            {
                try
                {
                    XmlDocument doc = new XmlDocument();
                    //Load the xml file
                    doc.Load(filePath);

                    //Find the nodes Fixedmask
                    XmlNode elemLeft = doc.SelectSingleNode("/MeasurementConfig/HandExtraction/FixedMaskMotorPathLeft");
                    XmlNode elemRight = doc.SelectSingleNode("/MeasurementConfig/HandExtraction/FixedMaskMotorPathRight");
                    XmlNode NumbIte = doc.SelectSingleNode("/MeasurementConfig/HandExtraction/NumberOfIterations");
                    XmlNode EnableFixedMask = doc.SelectSingleNode("/MeasurementConfig/HandExtraction/EnableFixedMask");
                    XmlNode DefaultLaserPower = doc.SelectSingleNode("/MeasurementConfig/HandExtraction/DefaultLaserPower");

                    Console.WriteLine("The old fixedMask: " + elemLeft.InnerText);


                    //Change the value of the fixedmasks
                    elemLeft.InnerText = fixedMaskLeft;
                    elemRight.InnerText = fixedMaskRight;
                    NumbIte.InnerText = "0";
                    EnableFixedMask.InnerText = "true";
                    DefaultLaserPower.InnerText = "0";

                    Console.WriteLine("The new FixedMask: " + fixedMaskLeft);


                    //Save file
                    doc.Save(filePath);
                    return true;
                }
                catch (Exception e)
                {
                    return false;
                }
            }

            public bool ChangeSelfTest(string filePath, string skipSelfTest1, string skipSelfTest2, string skipSelfTest3, string skipSelfTest4)
            {
                try
                {
                    XmlDocument doc = new XmlDocument();
                    //Load the xml file
                    doc.Load(filePath);

                    //Find the nodes Fixedmask
                    XmlNode selfTest1 = doc.SelectSingleNode("/DebugConfig/SelfTest/SkipSelfTest1");
                    XmlNode selfTest2 = doc.SelectSingleNode("/DebugConfig/SelfTest/SkipSelfTest2");
                    XmlNode selfTest3 = doc.SelectSingleNode("/DebugConfig/SelfTest/SkipSelfTest3");
                    XmlNode selfTest4 = doc.SelectSingleNode("/DebugConfig/SelfTest/SkipSelfTest4");

                    //Change the value of the fixedmasks
                    selfTest1.InnerText = skipSelfTest1;
                    selfTest2.InnerText = skipSelfTest2;
                    selfTest3.InnerText = skipSelfTest3;
                    selfTest4.InnerText = skipSelfTest4;

                    //Save file
                    doc.Save(filePath);
                    return true;
                }
                catch (Exception e)
                {
                    return false;
                }
            }

            public bool ChangeGrayValue(string filePath, string minGray, string maxGray)
            {
                try
                {
                    XmlDocument doc = new XmlDocument();
                    //Load the xml file
                    doc.Load(filePath);

                    //Find the nodes Fixedmask
                    XmlNode minGrayValue = doc.SelectSingleNode("/SelfTestConfig/SelfTest4/MinGrayLevelWedgeBlack");
                    XmlNode maxGrayValue = doc.SelectSingleNode("/SelfTestConfig/SelfTest4/MaxGrayLevelWedgeBlack");
                 
                    //Change the value of the fixedmasks
                    minGrayValue.InnerText = minGray;
                    maxGrayValue.InnerText = maxGray;
         
                    //Save file
                    doc.Save(filePath);
                    return true;
                }
                catch (Exception e)
                {
                    return false;
                }
            }
        

            public void modifyElement(string fileAddress, string root, string parent1, string parent2, string Element, string value)
            {
                var xml = XDocument.Load(fileAddress);
                var test = xml.Element(root).Elements(parent1);
                var query = from c in test.Elements(parent2).Elements(Element) select c;
                foreach (XElement var in query)
                {
                    var.Value = value;
                }
                xml.Save(fileAddress);
            }

            public string ObtainElement(string fileAddress, string root, string parent1, string parent2, string Element)
            {
                string result = string.Empty;
                XDocument xml = XDocument.Load(fileAddress);
                foreach (XElement a in xml.Element(root).Element(parent1).Element(parent2).Descendants(Element))
                {
                    result = a.Value;
                }

                return result;
                
             }

            public void createNewConfig(XmlTextWriter writer)
            {
                writer.WriteStartDocument(true);
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 2;
                writer.WriteStartElement("Test");

                // first test set
                writer.WriteStartElement("FAT1");
                    writer.WriteStartElement("id");
                    writer.WriteString("1");
                    writer.WriteEndElement();

                    writer.WriteStartElement("LUT");
                        writer.WriteStartElement("GRID4");
                        writer.WriteString("Empty");
                        writer.WriteEndElement();

                        writer.WriteStartElement("GRID");
                        writer.WriteString("Empty");
                        writer.WriteEndElement();

                        writer.WriteStartElement("Intensity");
                        writer.WriteString("Empty");
                        writer.WriteEndElement();

                        writer.WriteStartElement("Mass");
                        writer.WriteString("Empty");
                        writer.WriteEndElement();

                        writer.WriteStartElement("Distance");
                        writer.WriteString("Empty");
                        writer.WriteEndElement();
            writer.WriteEndElement();

            writer.WriteEndElement();

                // second test set
                writer.WriteStartElement("FAT2");
                    writer.WriteStartElement("id");
                    writer.WriteString("2");
                    writer.WriteEndElement();
                writer.WriteEndElement();

                // third test set
                writer.WriteStartElement("FAT3");
                    writer.WriteStartElement("id");
                    writer.WriteString("3");
                    writer.WriteEndElement();
                writer.WriteEndElement();

                // fourth test set
                writer.WriteStartElement("FAT4");
                    writer.WriteStartElement("id");
                    writer.WriteString("4");
                    writer.WriteEndElement();
                writer.WriteEndElement();

                writer.WriteEndElement();
                writer.WriteEndDocument();
                writer.Close();

            }
}

        public class FtpTransfer
        {

        private string _hostname;
        private string _fingerprint;
        private string _username;
        private string _password;
        private string ftpSetting = @"Setting\profile.xml";

        public FtpTransfer()
        {
            XmlDocument doc = new XmlDocument();

            // update setting from profile.xml
            doc.Load(ftpSetting);
            XmlNode __hostname = doc.SelectSingleNode("/Profile/IPAddress");
            XmlNode __fingerprint = doc.SelectSingleNode("/Profile/Fingerprint");
            XmlNode __username = doc.SelectSingleNode("/Profile/UserName");
            XmlNode __password = doc.SelectSingleNode("/Profile/Password");
            _hostname = __hostname.InnerText;
            _fingerprint = __fingerprint.InnerText;
            _username = __username.InnerText;
            _password = __password.InnerText;
            doc.Save(ftpSetting);

        }

        public bool Upload(string localFile, string hostPath)
            {
                try
                {
                    // Set up session options
                    SessionOptions sessionOptions = new SessionOptions
                    {
                        Protocol = Protocol.Ftp,
                        HostName = _hostname, //Ip adress 
                        PortNumber = 21,
                        UserName = _username,
                        Password = _password,
                        TlsHostCertificateFingerprint = _fingerprint,
                        FtpSecure = FtpSecure.Explicit,
                    };

                    using (Session session = new Session())
                    {
                        // Connect
                        session.Open(sessionOptions);

                        // Your code

                        // Upload file
                        TransferOptions transferOptions = new TransferOptions();
                        transferOptions.TransferMode = TransferMode.Binary;

                        TransferOperationResult transferResultUpload;
                        transferResultUpload = session.PutFiles(localFile, hostPath, false, transferOptions);

                        // Throw on any error
                        transferResultUpload.Check();
                        return true;
                    }

                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: {0}", e);
                    return false;
                }
            }

            public bool Download(string localPath, string ftpFile)
            {
                try
                {
                    // Set up session options
                    SessionOptions sessionOptions = new SessionOptions
                    {
                        Protocol                        = Protocol.Ftp,
                        HostName                        = _hostname,
                        PortNumber                      = 21,
                        UserName                        = _username,
                        Password                        = _password,
                        TlsHostCertificateFingerprint   = _fingerprint,
                        FtpSecure                       = FtpSecure.Explicit,
                    };

                    using (Session session = new Session())
                    {
                        // Connect
                        session.Open(sessionOptions);

                        // Your code

                        // Upload file
                        TransferOptions transferOptions = new TransferOptions();
                        transferOptions.TransferMode = TransferMode.Binary;

                        TransferOperationResult transferResultDownload;
                        transferResultDownload = session.GetFiles(ftpFile, localPath, false, transferOptions);

                        // Throw on any error
                        transferResultDownload.Check();
                        return true;
                    }

                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: {0}", e);
                    return false;
                }
            }
  

        public bool DownloadLatest(string _hostName, string fingerprint, string localPath, string hostPath)
            {
                try
                {
                    // Set up session options
                    SessionOptions sessionOptions = new SessionOptions
                    {
                        Protocol = Protocol.Ftp,
                        HostName = _hostName,
                        PortNumber = 21,
                        UserName = "Service Engineer",
                        Password = "192+SERV.HEMI",
                        TlsHostCertificateFingerprint = fingerprint,
                        FtpSecure = FtpSecure.Explicit,
                    };

                    using (Session session = new Session())
                    {
                        // Connect
                        session.Open(sessionOptions);

                        // Your code
                        RemoteDirectoryInfo directoryInfo = session.ListDirectory(hostPath);


                        IEnumerable<RemoteFileInfo> latest =
                        directoryInfo.Files
                            .Where(file => file.IsDirectory)
                            .OrderByDescending(file => file.FullName)
                            .Take(2);

                        // Upload file
                        TransferOptions transferOptions = new TransferOptions();
                        transferOptions.TransferMode = TransferMode.Binary;

                        foreach (RemoteFileInfo currInfo in latest)
                        {
                            string directoryName = Path.GetFileName(currInfo.FullName);
                            string localDirePath = Path.Combine(localPath, directoryName);
                            Directory.CreateDirectory(localDirePath);
                            session.GetFiles(session.EscapeFileMask(currInfo.FullName), localDirePath, false, transferOptions);
                        }
                        return true;
                    }

                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: {0}", e);
                    return false;
                }
            }
        }
    }


